# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Authentication {
  accessToken: String!
}

type College {
  courses: [Course!]
  id: ID!
  name: String!
  university: University!
  universityId: String!
}

type CollegeObject {
  courses: [CourseObject!]!
  id: ID!
  name: String!
  universityId: String!
}

type Course {
  college: College!
  collegeId: String!
  id: ID!
  name: String!
  sections: [Section!]
  university: University!
  universityId: String!
}

type CourseObject {
  collegeId: String!
  id: ID!
  name: String!
  universityId: String!
}

input CreateCollegeInput {
  name: String!
}

input CreateCourseInput {
  collegeId: String!
  name: String!
}

input CreateSectionInput {
  courseId: String!
  name: String!
}

input CreateUniversityInput {
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GroupedByRoleUniversitiesObject {
  role: String!
  universities: [UniversityObject!]!
}

input LoginUserInput {
  email: String!
  password: String!
}

type Mutation {
  createCollege(data: CreateCollegeInput!): CollegeObject!
  createCourse(data: CreateCourseInput!): CourseObject!
  createSection(data: CreateSectionInput!): SectionObject!
  createUniversity(data: CreateUniversityInput!, logo: Upload): UniversityObject!
  deleteCollege(id: String!): CollegeObject!
  deleteCourse(id: String!): CourseObject!
  deleteSection(id: String!): SectionObject!
  deleteUniversity(id: String!): UniversityObject!
  leaveUniversity(id: String!): UniversityObject!
  login(user: LoginUserInput!): Authentication!
  logout: Authentication
  refreshTokens: Authentication!
  register(avatar: Upload, user: RegisterUserInput!): Authentication!
  updateCollege(data: CreateCollegeInput!, id: String!): CollegeObject!
  updateCourse(data: CreateCourseInput!, id: String!): CourseObject!
  updateSection(data: CreateSectionInput!, id: String!): SectionObject!
  updateUniversity(data: CreateUniversityInput!, id: String!, logo: Upload): UniversityObject!
}

type Query {
  colleges(universityId: String!): [CollegeObject!]!
  me: UserObject!
  sections(courseId: String!): [SectionObject!]!
}

input RegisterUserInput {
  email: String!
  fatherInitial: String!
  firstName: String!
  lastName: String!
  password: String!
}

type Role {
  id: ID!
  name: String!
  scopes: [Scope!]
  universityUsers: [UniversityUser!]
}

type Scope {
  id: ID!
  name: String!
  roles: [Role!]
}

type Section {
  course: Course!
  courseId: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  university: University!
  universityId: String!
}

type SectionObject {
  courseId: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  universityId: String!
}

type University {
  colleges: [College!]
  courses: [Course!]
  id: ID!
  logo: String
  name: String!
  sections: [Section!]
  universityUsers: [UniversityUser!]
}

type UniversityObject {
  id: ID!
  logo: String
  name: String!
}

type UniversityUser {
  role: Role!
  roleId: String!
  university: University!
  universityId: String!
  user: User!
  userId: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatar: String
  email: String!

  """First letter of the father's first name"""
  fatherInitial: String!
  firstName: String!
  id: ID!
  lastName: String!
  password: String!
  universityUsers: [UniversityUser!]
}

type UserObject {
  avatar: String
  email: String!

  """First letter of the father's first name"""
  fatherInitial: String!
  firstName: String!
  groupedByRoleUniversities: [GroupedByRoleUniversitiesObject!]!
  id: ID!
  lastName: String!
}
